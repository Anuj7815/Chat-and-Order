1. findOne()-> used to retrieve a single document from the mongodb collection that matches a given query.
-> it returns the first matching document or null.

Example:
const user = await User.findOne({ email: "test@example.com" });
if (!user) {
    console.log("User not found");
} else {
    console.log("User found:", user);
}

2. find()-> used to retrieve all the documents that matches the given query condition.
-> it returns an array of matching documents.

Example:
const admins = await User.find({ role: "admin" });
console.log("Admin Users:", admins);

3. findById()-> finds a document by its unique mongodb object id.
-> returns a single document if found otherwise null.

Example:
const user = await User.findById("65f8e8b4d2a9a75b8c7a5678");
console.log("User Details:", user);

4. create()-> used to insert the new document into the database
-> automatically saves the document

Example:
const newUser = await User.create({
    name: "John Doe",
    email: "john@example.com",
    password: "securePassword123",
    number: 1234432242,
});
console.log("User Created:", newUser);

5. save()-> used to save a document after making changes

Example:
const user = await User.findOne({ email: "john@example.com" });
if (user) {
    user.password = "newSecurePassword123";
    await user.save();
    console.log("Password updated!");
}

6. updateOne()-> used to modify a single document matching the given condition

Example:
await User.updateOne({ email: "john@example.com" }, { $set: { role: "admin" } });
console.log("User role updated!");

7. updateMany()-> update all documents that match the query condition

Example:
await User.updateMany({ role: "user" }, { $set: { role: "member" } });
console.log("Updated roles for all users");

8. findOneAndUpdate()-> finds a document, update it and returns the document

Example:
const updatedUser = await User.findOneAndUpdate(
    { email: "john@example.com" },
    { $set: { name: "John Updated" } },
    { new: true } // `new: true` ensures it returns the updated document
);
console.log("Updated User:", updatedUser);

9. findOneAndDelete()-> finds a document, delete it and returns the deleted document
-> useful when you need the delete document in reference

Example:
const deletedUser = await User.findOneAndDelete({ email: "john@example.com" });
console.log("Deleted User:", deletedUser);

10. deleteOne()-> deletes the first matching element

Example:
await User.deleteOne({ _id: "65f8e8b4d2a9a75b8c7a5678" });
console.log("User deleted successfully!");

11. deleteMany()-> delete all the documents that matches the condition

Example:
await User.deleteMany({ status: "inactive" });
console.log("Deleted all inactive users!");

12. countDocuments()-> used to count the number of documents that matches the given query

Example:
const adminCount = await User.countDocuments({ role: "admin" });
console.log(`Total Admins: ${adminCount}`);

13. exists()-> checks if the documents exists then returns true otherwise returns false

Example:
const userExists = await User.exists({ email: "test@example.com" });
console.log("User exists?", userExists ? "Yes" : "No");

14. distinct()-> returns distinct values from a specified feild

Example:
const roles = await User.distinct("role");
console.log("Unique Roles:", roles);

15. sort()-> used to sort the documents in ascending(1) or descending(-1)

Example:
const sortedUsers = await User.find().sort({ name: 1 }); // Ascending order
console.log("Sorted Users:", sortedUsers);

***********************************************************************************
#Status Codes

1. 100-199 -> informational responses

2. 200-299 -> Successfullt responses
// 200-> the request succeeded
// 201-> the request succeeded and the new resource was created as a result.
// 202-> accepted-> the request has been received but not yet acted upon.
// -> It is intended for cases where another process or server handles the request, or for batch processing.

3. 300-399 -> redirectional messages
// 300-> multiple choices
// 301-> the url of the requested resource has been changed permanently. The new url is given to the response.

4. 400-499 -> client error responses
// 400-> bad request (the server cannot or will not process the request due to something that is perceived to be the client error)
//  401-> unauthorized /unauthenticated
// 403-> forbidden (the client does not have access rights to the content that is, it is unauthorized, so the server is refusing to give the requested resource.)
// Note: unlike 401 unauthrized , in 403 the client's identity is known to the server
// 404- not found-> the server cannot find the requested resource
// 408-> request timeout
// 409-> conflict -> this response is sent when a request conflicts with the current state of the server.

5. 500-509 -> server error responses
// 500-> internal server error-> the server has encountered a situation and it does not know how to handle it
// 501-> not implemented -> the request method is not supported by the server and cannot be handled.
// 502-> bad gateway-> while working as a gateway to get a response needed to handle the request, got an invalid response.